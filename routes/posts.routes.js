/**
 * @swagger
 * components:
 *   schemas:
 *     Post:
 *       type: object
 *       required:
 *         - author
 *         - title
 *         - content
 *       properties:
 *         id:
 *           type: integer
 *           description: The auto-generated by DB id of the post.
 *         author_id:
 *           type: integer
 *           description: ID of post author.
 *         title:
 *           type: string
 *           maximum: 255
 *           description: Main post title.
 *         content:
 *           type: string
 *           maximum: 65535
 *           description: Content of the post.
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Date and time with timezone of post creation.
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Date and time with timezone when post was updated.
 *       example:
 *          id: 1
 *          author_id: 4
 *          title: My first post
 *          content: I love people and whole world
 *          createdAt: 2022-04-17 01:52:11.012+03
 *          updatedAt: 2022-04-18 01:52:11.012+03
 */

/**
 * @swagger
 * tags:
 *  name: Post
 *  description: API to manage blog posts.
 */

/**
 @swagger
 *path:
 * /posts:
 *   get:
 *     summary: Get all posts
 *     tags: [Post]
 *     responses:
 *       "200":
 *         description: It's OK
 *         content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  id:
 *                    type: integer
 *                  title:
 *                    type: string
 *                  content:
 *                    type: string
 *                  author:
 *                    type: object
 *                    properties:
 *                      id:
 *                        type: integer
 *                      username:
 *                        type: string
 *                  createdAt:
 *                    type: string
 *                    format: date-time
 *   post:
 *     summary: Post new record
 *     tags: [Post]
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 max: 255
 *               content:
 *                 type: string
 *                 max: 65535
 *               files:
 *                  type: array
 *                  items:
 *                    type: string
 *                    format: binary
 *                  maxItems: 10
 *             example:
 *               title: First post title
 *               content: I love people and whole world
 *           encoding:
 *             files:
 *               contentType: image/png, image/jpeg, image/jpg, video/mp4
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 max: 255
 *               content:
 *                 type: string
 *                 max: 65535
 *             example:
 *               title: Second post title
 *               content: I love people and whole world
 *     responses:
 *       "204":
 *         description: Post successfully created
 * /posts/{id}:
 *   get:
 *     summary: Get one post data by post ID
 *     tags: [Post]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: Post ID
 *     responses:
 *       "200":
 *         description: It's OK
 *         content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                id:
 *                  type: integer
 *                title:
 *                  type: string
 *                content:
 *                  type: string
 *                author:
 *                  type: object
 *                  properties:
 *                    id:
 *                      type: integer
 *                    username:
 *                      type: string
 *                createdAt:
 *                  type: string
 *                  format: date-time
 *       "404":
 *         description: Post does not exists
 *         content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                message:
 *                  type: string
 *              example:
 *                message: Запись не найдена
 *   put:
 *     summary: Update post data by post ID
 *     tags: [Post]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: Post ID
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 max: 255
 *               content:
 *                 type: string
 *                 max: 65535
 *               attachments:
 *                description: IDs of uploaded attachments
 *                type: array
 *                items:
 *                  type: integer
 *               files:
 *                  type: array
 *                  items:
 *                    type: string
 *                    format: binary
 *                  maxItems: 10
 *             example:
 *               title: First post title
 *               content: I love people and whole world
 *           encoding:
 *             files:
 *               contentType: image/png, image/jpeg, image/jpg, video/mp4
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 max: 255
 *               content:
 *                 type: string
 *                 max: 65535
 *             example:
 *               title: Second post title
 *               content: I love people and whole world
 *     responses:
 *       "204":
 *         description: Post successfully created
 *       "403":
 *          description: User has no access to update
 *       "404":
 *          description: Post not found
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                properties:
 *                  message:
 *                    type: string
 *                example:
 *                   message: Запись не найдена
 *   delete:
 *     summary: Delete post by post ID
 *     tags: [Post]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: Post ID
 *     responses:
 *       "204":
 *         description: Post successfully created
 *       "403":
 *          description: User has no access to delete
 *       "404":
 *          description: Post not found
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                properties:
 *                  message:
 *                    type: string
 *                example:
 *                   message: Запись не найдена
 * /users/{id}/posts:
 *   get:
 *     summary: Get all posts of specific user by User ID
 *     tags: [Post]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: User ID
 *     responses:
 *       "200":
 *         description: It's OK
 *         content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  id:
 *                    type: integer
 *                  title:
 *                    type: string
 *                  content:
 *                    type: string
 *                  author:
 *                    type: object
 *                    properties:
 *                      id:
 *                        type: integer
 *                      username:
 *                        type: string
 *                  createdAt:
 *                    type: string
 *                    format: date-time
*/

import * as fs from 'fs';
import express from 'express';
import passport from 'passport';
import multer from 'multer';
import checkAuthenticated from '../middleware/passport.js';
import { getPostsPage, getPostPage, getCreatePostPage, getUpdatePostPage, getPost, createPost, updatePost, deletePost, getPosts, getUserPosts } from '../controllers/posts.controllers.js';

var router = express.Router();
var storage = multer.diskStorage({
  destination: function (req, file, cb) {
    var currentDate = new Date();
    var stringDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()}`;

    if (!fs.existsSync(`./public/uploads/attachments/${stringDate}`)) {
      fs.mkdirSync(`./public/uploads/attachments/${stringDate}`);
    }

    cb(null, `./public/uploads/attachments/${stringDate}`);
  },
  filename: function (req, file, cb) {
    var uniqueSuffix = Date.now();

    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});
var upload = multer({
  storage,
  limits: { fileSize: 1e+7 },
  fileFilter: (req, file, cb) => {
    if (file.mimetype == "image/png" || file.mimetype == "image/jpg" || file.mimetype == "image/jpeg" || file.mimetype == "video/mp4") {
        cb(null, true);
    } else {
        return cb(new Error('Недопустимый формат файла'));
    }
}
});

// Pages
router.get('/', checkAuthenticated, getPostsPage);
router.get('/posts/:id', checkAuthenticated, getPostPage);
router.get('/posts/:id/edit', checkAuthenticated, getUpdatePostPage);
router.get('/new-post', checkAuthenticated, getCreatePostPage);
router.get('/users/:id/posts', checkAuthenticated, getPostsPage);

// API
router.get('/api/posts', getPosts);
router.get('/api/posts/:id', getPost);
router.get('/api/users/:id/posts', getUserPosts);
router.post('/api/posts', upload.array('files', 10), passport.authenticate('jwt', { session: false }), createPost);
router.put('/api/posts/:id', upload.array('files', 10), passport.authenticate('jwt', { session: false }), updatePost);
router.delete('/api/posts/:id', passport.authenticate('jwt', { session: false }), deletePost);

export default router;
