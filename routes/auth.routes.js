/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - username
 *         - password
 *       properties:
 *         id:
 *           type: integer
 *           description: The auto-generated by DB id of the user.
 *         username:
 *           type: string
 *           maximum: 255
 *           description: Username of person, case-insensitive.
 *         password:
 *           type: string
 *           format: password
 *           maximum: 255
 *           description: Simple person's password.
 *         isActive:
 *           type: boolean
 *           description: Shows is user active or blocked. Default vaule is "true".
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Date and time with timezone of user registration.
 *       example:
 *          id: 1
 *          username: petrovich
 *          password: $2b$10$BgnJV5n9wvxyWsNkdbG.zOXaMZA5bohfQBOURS1LtZJ3XLpUGzQMG
 *          isActive: true
 *          createdAt: 2022-04-17 01:52:11.012+03
 */

/**
 * @swagger
 * tags:
 *  name: Auth
 *  description: API to manage user's registration and authorization.
 */

/**
 @swagger
 *path:
 * /auth/register:
 *   post:
 *     summary: Registeres new user
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 max: 255
 *               password:
 *                 type: string
 *             example:
 *               username: petrovich
 *               password: aLKWNASFk3NHsa
 *     responses:
 *       "204":
 *         description: User successfully created
 *       "409":
 *         description: The user with unique username already exists
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *               example:
 *                 message: Пользователь уже существует
 * /auth/login:
 *   post:
 *     summary: User authorization
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 max: 255
 *               password:
 *                 type: string
 *             example:
 *               username: petrovich
 *               password: aLKWNASFk3NHsa
 *     responses:
 *       "200":
 *         description: User successfully authorized
  *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 secret_token:
 *                   type: string
 *               example:
 *                 secret_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VybmFtZSI6InBldHJvdmljaCJ9LCJpYXQiOjE2NTAyMzcxMTQsImV4cCI6MTY1MDMyMzUxNH0.RIK3VoyjEyaBrVBLsB771iHt2wBkFBi9caKp_RF8JlE
 *       "401":
 *         description: Wrong username or password
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *               example:
 *                 message: Неверный логин или пароль
*/

import express from 'express';
import checkAuthenticated from '../middleware/passport.js';
import { register, logIn, logOut } from '../controllers/auth.controllers.js';

const router = express.Router();

// Pages
router.get('/login', checkAuthenticated, (req, res) => {
  if (req.user) return res.redirect('/');

  res.render('login', { title: 'Вход' });
});
router.get('/register', checkAuthenticated, (req, res) => {
  if (req.user) return res.redirect('/');

  res.render('register', { title: 'Регистрация' });
});
router.get('/logout', checkAuthenticated, logOut);

// API
router.post('/api/auth/register', register);
router.post('/api/auth/login', logIn);

export default router;
